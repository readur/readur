use axum::{
    routing::{get, post, delete, put},
    Router,
};
use std::sync::Arc;

use crate::AppState;

// Declare the modules
mod crud;
mod sync;
mod validation;
mod estimation;

// Import all the modularized functions
use crud::*;
use sync::*;
use validation::*;
use estimation::*;

/// Sources router with all source-related endpoints
pub fn router() -> Router<Arc<AppState>> {
    Router::new()
        // Basic CRUD operations
        .route("/", get(list_sources).post(create_source))
        .route("/{id}", get(get_source).put(update_source).delete(delete_source))
        
        // Sync operations
        .route("/{id}/sync", post(trigger_sync))
        .route("/{id}/sync/stop", post(stop_sync))
        .route("/{id}/deep-scan", post(trigger_deep_scan))
        
        // Validation and testing
        .route("/{id}/validate", post(validate_source))
        .route("/{id}/test", post(test_connection))
        .route("/test-connection", post(test_connection_with_config))
        
        // Estimation
        .route("/{id}/estimate", post(estimate_crawl))
        .route("/estimate", post(estimate_crawl_with_config))
}